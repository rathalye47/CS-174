<?php
require_once 'login.php';

$conn = new mysqli($hn, $un, $pw, $db); // Creates $conn by calling a new instance of the mysqli method, passing all values retrieved from the login.php file.
if ($conn->connect_error) die(mysql_fatal_error()); // Error checking.

// Form for the admin to upload a malware file and enter a name for the uploaded malware.
echo <<<_END
<html><head><title>Malware Information</title></head><body>
<form method='post' action='malwareContent.php' enctype='multipart/form-data'>
Malware File:&emsp; <input type='file' name='malwareContent' size='10'><br></br>
Malware Name:&emsp; <input type='text' name='malwareName' size='10'><br></br>
<input type='submit' value='Submit'></form>
_END;

// Checks if $_POST['malwareName'] and $_FILES exist.
if (isset($_POST['malwareName']) && $_FILES) {
    $malwareName = get_post($conn, 'malwareName'); // Stores the name of the uploaded malware.

    // Checks if the name of the uploaded malware contains English letters (capitalized or not) and digits, and is not an empty string.
    if (!preg_match('/[^A-Za-z0-9]/', $malwareName) && !empty($malwareName)) {
        $malwareFileName = htmlentities($_FILES['malwareContent']['tmp_name']); // Stores the name of the malware file.
        $fp = fopen($malwareFileName, 'r'); // Opens the malware file for reading only.
        $malwareFileContent = fread($fp, 20); // Stores the first 20 bytes of the malware file.
        fclose($fp);

        // Inserts the first 20 bytes of the malware file and the name of the uploaded malware into the 'malware_information' table.
        $query = "INSERT INTO malware_information VALUES"."('$malwareFileContent', '$malwareName', NULL)";
        $result = $conn->query($query);

        if (!$result) echo "Sorry! Something went wrong!"; // Error checking.
    }

    // The name of the uploaded malware contains a foreign character or is an empty string.
    else {
        echo "Sorry! Something went wrong!";
    }
}

echo "</body></html>";

$conn->close();

// Helper function to sanitize a string.
function get_post($connection, $var) {
    return $connection->real_escape_string($_POST[$var]);
}

// Helper function to generate a user friendly error message.
function mysql_fatal_error() {
    echo "Sorry! Something went wrong!";
}

?>